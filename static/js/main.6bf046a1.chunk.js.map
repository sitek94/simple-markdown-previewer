{"version":3,"sources":["components/Panel.js","components/Previewer.js","components/Editor.js","containers/App.js","index.js"],"names":["Toolbar","isMaximized","label","onResizeIconClick","className","onClick","Panel","children","props","marked","setOptions","breaks","renderer","Renderer","Previewer","originalText","id","dangerouslySetInnerHTML","__html","Editor","inputText","onChange","value","App","useState","singleWindowMode","setSingleWindowMode","showEditor","setShowEditor","placeholder","setInputText","showPreviewer","setShowPreviewer","style","gridTemplateRows","gridTemplateColumns","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAKA,SAASA,EAAT,GAA6D,IAA1CC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,kBACrC,OACE,yBAAKC,UAAU,WACb,kBAAC,IAAD,CAASA,UAAU,SACnB,yBAAKA,UAAU,SAAf,IAAyBF,GACzB,4BAAQE,UAAU,SAASC,QAASF,GACjCF,EAAc,kBAAC,IAAD,MAAuB,kBAAC,IAAD,QAM/B,SAASK,EAAT,GAAwC,IAAvBC,EAAsB,EAAtBA,SAAaC,EAAS,4BACpD,OACE,yBAAKJ,UAAU,SACb,kBAACJ,EAAYQ,GACZD,GChBPE,IAAOC,WAAW,CAChBC,QAAQ,IAGV,IAAMC,EAAW,IAAIH,IAAOI,SAIb,SAASC,EAAT,GAAgD,IAA3BC,EAA0B,EAA1BA,aAAiBP,EAAS,gCAI5D,OACE,kBAACF,EAAD,iBAAWE,EAAX,CAAkBN,MAAM,YAAYE,UAAU,cAC5C,yBAAKY,GAAG,UAAUZ,UAAU,WAAWa,wBAJlC,CAAEC,OAAQT,IAAOM,EAAcH,OCX3B,SAASO,EAAT,GAAoD,IAAlCC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,SAAab,EAAS,wCAChE,OACE,kBAACF,EAAD,iBAAWE,EAAX,CAAkBN,MAAM,SAASE,UAAU,WACzC,8BAAUY,GAAG,SAASM,MAAOF,EAAWC,SAAUA,EAAUjB,UAAU,cCF7D,SAASmB,IAAM,MAEoBC,oBAAS,GAF7B,mBAErBC,EAFqB,KAEHC,EAFG,OAYQF,oBAAS,GAZjB,mBAYrBG,EAZqB,KAYTC,EAZS,OAuBMJ,mBAASK,GAvBf,mBAuBrBT,EAvBqB,KAuBVU,EAvBU,OA6BcN,oBAAS,GA7BvB,mBA6BrBO,EA7BqB,KA6BNC,EA7BM,KAuC5B,OACE,yBAAK5B,UAAU,MAAM6B,MAAOR,EAlCJ,CACxBS,iBAAkB,MAClBC,oBAAqB,OAgC8C,MAChER,GACC,kBAACR,EAAD,CACElB,YAAawB,EACbL,UAAWA,EACXC,SArBa,SAACe,GACpBN,EAAaM,EAAEC,OAAOf,QAqBhBnB,kBAAmBsB,EA7BJ,WACrBO,GAAiB,GACjBN,GAAoB,IANC,WACrBM,GAAiB,GACjBN,GAAoB,MAkCjBK,GACC,kBAACjB,EAAD,CACEb,YAAawB,EACbV,aAAcK,EACdjB,kBAAmBsB,EAnBD,WACxBG,GAAc,GACdF,GAAoB,IANI,WACxBE,GAAc,GACdF,GAAoB,OA4BxB,IAAMG,EAAW,usDC1DjBS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACjB,EAAD,OAEFkB,SAASC,eAAe,U","file":"static/js/main.6bf046a1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { FaReact } from 'react-icons/fa';\r\nimport { MdFullscreen, MdFullscreenExit } from 'react-icons/md';\r\n\r\nfunction Toolbar({ isMaximized, label, onResizeIconClick }) {\r\n  return (\r\n    <div className=\"Toolbar\">\r\n      <FaReact className=\"logo\" />\r\n      <div className=\"label\"> {label}</div>\r\n      <button className=\"button\" onClick={onResizeIconClick}>\r\n        {isMaximized ? <MdFullscreenExit /> : <MdFullscreen />}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Panel({ children, ...props }) {\r\n  return (\r\n    <div className=\"Panel\">\r\n      <Toolbar {...props} />\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport marked from 'marked';\r\n\r\nimport Panel from './Panel';\r\n\r\nmarked.setOptions({\r\n  breaks: true,\r\n});\r\n\r\nconst renderer = new marked.Renderer();\r\n\r\n// Parses the text that that it gets from props as originalText\r\n// and then renders output\r\nexport default function Previewer({ originalText, ...props }) {\r\n  function createMarkup() {\r\n    return { __html: marked(originalText, renderer) };\r\n  }\r\n  return (\r\n    <Panel {...props} label=\"Previewer\" className=\"Previewer\">\r\n      <div id=\"preview\" className=\"markdown\" dangerouslySetInnerHTML={createMarkup()} />\r\n    </Panel>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport Panel from './Panel';\r\n\r\nexport default function Editor({ inputText, onChange, ...props }) {\r\n  return (\r\n    <Panel {...props} label=\"Editor\" className=\"Editor\">\r\n      <textarea id=\"editor\" value={inputText} onChange={onChange} className=\"textarea\" />\r\n    </Panel>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport Previewer from '../components/Previewer';\r\nimport Editor from '../components/Editor';\r\n\r\nexport default function App() {\r\n  // Single window mode\r\n  const [singleWindowMode, setSingleWindowMode] = useState(false);\r\n\r\n  // When changing to single window mode, I apply inline style\r\n  // to change display to 1x1 grid\r\n  const singleWindowStyle = {\r\n    gridTemplateRows: '1fr',\r\n    gridTemplateColumns: '1fr',\r\n  };\r\n\r\n  // Editor\r\n  const [showEditor, setShowEditor] = useState(true);\r\n  const maximizeEditor = () => {\r\n    setShowPreviewer(false);\r\n    setSingleWindowMode(true);\r\n  };\r\n  const minimizeEditor = () => {\r\n    setShowPreviewer(true);\r\n    setSingleWindowMode(false);\r\n  };\r\n  \r\n  // Handle textarea input from Editor component\r\n  const [inputText, setInputText] = useState(placeholder);\r\n  const handleChange = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n\r\n  // Previewer\r\n  const [showPreviewer, setShowPreviewer] = useState(true);\r\n  const maximizePreviewer = () => {\r\n    setShowEditor(false);\r\n    setSingleWindowMode(true);\r\n  };\r\n  const minimizePreviewer = () => {\r\n    setShowEditor(true);\r\n    setSingleWindowMode(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\" style={singleWindowMode ? singleWindowStyle : null}>\r\n      {showEditor && (\r\n        <Editor\r\n          isMaximized={singleWindowMode}\r\n          inputText={inputText}\r\n          onChange={handleChange}\r\n          onResizeIconClick={singleWindowMode ? minimizeEditor : maximizeEditor}\r\n        />\r\n      )}\r\n      {showPreviewer && (\r\n        <Previewer\r\n          isMaximized={singleWindowMode}\r\n          originalText={inputText}\r\n          onResizeIconClick={singleWindowMode ? minimizePreviewer : maximizePreviewer}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst placeholder = \r\n`\r\n# Markdown Previewer\r\n\r\nHi, I'm [Maciek](https://github.com/sitek94), welcome to my Markdown Previewer! \r\n\r\nThe project was built for learning purposes as a part of **Front End Libraries Certification** by [freeCodeCamp](https://www.freecodecamp.org/).\r\n\r\nYou can find the challenge by clicking [here](https://www.freecodecamp.org/learn/front-end-libraries/front-end-libraries-projects/build-a-markdown-previewer).\r\n\r\n![freeCodeCamp](https://raw.githubusercontent.com/sitek94/pomodoro-clock/master/free-code-camp.png)\r\n\r\n## Marked - Markdown Parser\r\n[Marked] lets you convert [Markdown] into \\`HTML\\`.  Markdown is a simple text format whose goal is to be very easy to read and write, even when not converted to HTML.  This demo page will let you type anything you like and see how it gets converted.  Live.  No more waiting around.\r\n\r\nHow To Use It?\r\n-------------------\r\n\r\n1. Type in stuff on the left.\r\n2. See the live updates on the right.\r\n\r\nThat's it.  Pretty simple.\r\n\r\nWhy Markdown?\r\n-------------\r\n\r\nIt's easy.  It's not overly bloated, unlike HTML.  Also, as the creator of [markdown] says,\r\n\r\n> The overriding design goal for Markdown's\r\n> formatting syntax is to make it as readable\r\n> as possible. The idea is that a\r\n> Markdown-formatted document should be\r\n> publishable as-is, as plain text, without\r\n> looking like it's been marked up with tags\r\n> or formatting instructions.\r\n\r\nReady to start writing? Then start changing stuff, have fun!\r\n\r\n[Marked]: https://github.com/markedjs/marked/\r\n[Markdown]: http://daringfireball.net/projects/markdown/\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction passTests(code) {\r\n  if (code.includes(multiLineCode)) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\\`\\`\\`\r\n`","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.scss';\r\nimport './markdown-style.scss';\r\n\r\nimport App from './containers/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}